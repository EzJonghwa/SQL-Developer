/*
뷰 view 338p
     하나이상의 테이블을 연결해 마치 테이블인 것 처럼 사용하는 객체
     실제데이터는 뷰를 구성하는 테이블에 담겨 있지만 테이블 처럼 사용가능
     
     사용목적 1. 자주 사용하는 sql문을 매번 작성할 필요 없이 뷰로 생성하여 사용가능
             2. 데이터 보안 측면(원천 테이블을 감 출 수있음)

          뷰 특징
        (1) 단순뷰 ( 테이블1개 )
            - 그룹함수 사용불가
            - distinct 사용불가
            - insert/update/delete 사용가능
        (2) 복합 뷰 ( 여러개 테이블 )
            - 그룹함수 사용 가능
            - distinct 사용가능
            - insert/update/delete 불가능
*/
CREATE OR REPLACE VIEW emp_dep AS
SELECT a.employee_id
        ,a.emp_name
        ,b.department_id
        ,b.department_name
        FROM employees a , departments b
        WHERE a.department_id =b.department_id;
-- SYSTEM 계정에서 JAVA 계정에 뷰를 생성 할 수있는 권한 부여
GRANT CREATE VIEW TO JAVA;


SELECT *
FROM EMP_DEP;
-- 마치 테이블 인 것 처럼 조회 가능
-- 복합 뷰 이기 때문에 INSERT/UPDATE/DELETE 불가능


-- java 계정에서 study 계정으로 조회 할 수있는 권한을 부여함
GRANT SELECT ON EMP_DEP TO Study;


SELECT*
FROM java.emp_dep;  
-- 타 계정에 있는 내용이기 때문에 앞에 해당 계정의아이디를 스키마로 붙여줘야한다

/*


동의어(SYNONYM) 354P
        시노님은 동의어라는 뜻으로 객체 각자의 교유한 이름에 대한 동의어를 만드는 것
        PUBLIC SYONYM 모든 사용자 접근
        PRIVATE SYNONYM 특정 사용자만 접근
        PUBLIC SYNONYM DBA 권한이 있는 사용자만 가능(생성,삭제)


사용목적  1. 보안측면 계정명(ID) , 테이블명과 같은 중요한 정보를 숨기기위해 별칭을 만듬
         2. 개발 편의성 실제 테이블의 정보가 변경 되어도 별칭으로 사용했다면 코드 수정 안해도됨.

*/

--SYSTEM 계정에서 시노님 생성 권한 부여
GRANT CREATE SYNONYM to member;

-- member 계정에서 member 테이블
-- default private synonym
CREATE OR REPLACE SYNONYM mem FOR member;   -- member 테이블을 mem 으로 

GRANT SELECT ON mem TO JAVA;

SELECT *
FROM member.mem;

-- system 계정에서 public synonym 생성
CREATE OR REPLACE PUBLIC SYNONYM mem2 FOR MEMBER.MEMBER;
GRANT SELECT ON mem2 TO study;

-- 
SELECT *
FROM MEM2;

-- 권한 해제
--REVOKE 권한 FROM 계정명;
-- public synonym  삭제는 dba권한이 있으야함
DROP PUBLIC SYNONYM mem2;

/*
    시퀀스 (sequence) 348p : 규칙에 따라 자동 순번을 반환하는 객체
    목적 : pk로 사용할 컬럼이 없는 경우
    시퀀스명.currval (현재 시퀀스값) 최초에는 없기 떄문에 안됨.
    시퀀스명 .NEXTVAL  다음 시퀀스 값
    
*/
CREATE SEQUENCE my_seq
INCREMENT BY 1      --  증감숫자
START WITH 1        --  시작 숫자
MINVALUE 1          --  최솟값
MAXVALUE 10         --  최댓값
NOCYCLE             --  최대나 최소에 도달 하면 생성중지 (CYCLE 은 다시 돌아감)
NOCACHE;             --  메모리에 최대 시퀀스 값을 할당 할지 말지(CACHE 에 할당함)





SELECT my_seq.NEXTVAL
FROM DUAL; 
SELECT my_seq.CURRVAL
FROM DUAL;

CREATE SEQUENCE my_seq2
INCREMENT BY 10
START WITH 1000
MINVALUE 1
MAXVALUE 99999999;

SELECT my_seq2.NEXTVAL
FROM DUAL;

CREATE TABLE ex11(
        dep_seq NUMBER PRIMARY KEY
        ,dt DATE DEFAULT SYSDATE
);

INSERT INTO ex11 (dep_seq) VALUES (my_seq2.NEXTVAL);
INSERT INTO ex11 (dep_seq) VALUES ((SELECT MAX(NVL(dep_seq,0)) +10
                                    FROM ex11));
FROM ex11;
SELECT *
FROM ex11;

SELECT MAX(NVL(dep_seq,0)) +10
FROM ex11;

--ORACLE 12 버젼 부터 사용 가능
--IDENTITY (테이블 생성시 사용가능)
CREATE TABLE ex11_1(
seq NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY
,title VARCHAR2(100)
);

INSERT INTO ex11_1 (title) VALUES ('hi');
SELECT *
FROM ex11_1;

CREATE TABLE ex11_2(
seq NUMBER GENERATED BY DEFAULT AS IDENTITY (
    START WITH 100
    INCREMENT BY 10
    MINVALUE 10
    MAXVALUE 1000000
    ) PRIMARY KEY
    ,title VARCHAR2(100)
);

INSERT INTO ex11_2(title) VALUES ('하일');
INSERT INTO ex11_2(title) VALUES ('하이');
INSERT INTO ex11_2(title) VALUES ('하심');
INSERT INTO ex11_2(title) VALUES ('하사');
INSERT INTO ex11_2(title) VALUES ('하오');

SELECT * FROM ex11_2;

-- 세미조인? 연관성이 없는 
-- EXISTS 서브쿼리에 셜 과 가 하나라도 존재하면 TRUE, 없으면 FALSE 를 반환.
-- 서브쿼리의 결과가 존재하는지 여부를 확인하는데 사용됨.
-- 수강이력이 있는 학생 조회 
SELECT *
FROM 학생 a
WHERE EXISTS (SELECT *
                FROM 수강내역
                WHERE 학번 = a.학번);

SELECT *
FROM 학생 a
WHERE NOT EXISTS (SELECT *
                FROM 수강내역
                WHERE 학번 = a.학번);   
-- in은 값으로 조회 / exists 는 테이블을 조인해서 조회 NOT과 조합해서 많이 사용


/*
    MERGE
    UPDATE OR DELETE 와 INSERT 를 한번에 처리할 수 있는 SQL 문 
*/
-- '과목' 테이블에서 머신러닝 과목이 있으면 학점을 3으로 업데이트
--                               없으면 INSERT('머신러닝',학점:2)


SELECT *
FROM 과목
ORDER BY 1;
MERGE INTO 과목 s     -- 대상테이블
    USING DUAL          -- 조건 테이블(DUAL은 대상 테이블 조건으로 할때)
    ON (S.과목이름 ='머신러닝') -- MATCHED 조건 
WHEN MATCHED THEN
UPDATE SET s.학점 =3


WHEN NOT MATCHED THEN
    INSERT(과목번호,과목이름,학점)
    VALUES((SELECT MAX(과목번호)+1
            FROM 과목),'머신러닝',2);











































        